{"title":"project-show","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"54643","content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  const privateKey = \"Team 6 Andromedia\";\n  if (user.id) {\n    let token_private = ext.CryptoJS.SHA3(privateKey, {\n      outputLength: 512,\n    }).toString();\n    let a_data = ext.CryptoJS.AES.decrypt(user.id, token_private).toString(\n      ext.CryptoJS.enc.Utf8\n    );\n    let data_split = a_data.split(\";\");\n    if (data_split[0]) {\n      let data = {\n        id: data_split[0],\n      };\n      db.muser\n        .findUnique({\n          where: {\n            id: parseInt(data.id),\n          },\n          select: {\n            email: true,\n            muser_role: {\n              select: {\n                name: true,\n              },\n            },\n          },\n        })\n        .then((e) => {\n          // Validasi Role\n          db.mproject\n            .findUnique({\n              where: {\n                id: params.id,\n              },\n            })\n            .then((e) => {\n              db.mproject_detail\n                .findMany({\n                  where: {\n                    AND: [\n                      {\n                        idproject: params.id,\n                      },\n                      {\n                        idparent: null,\n                      },\n                    ],\n                  },\n                  include: {\n                    mproject_status: true,\n                    mproject_upload: true,\n                    mproject_task_user: {\n                      include: {\n                        muser_has_mproject: {\n                          include: {\n                            muser: true,\n                          },\n                        },\n                      },\n                    },\n                  },\n                })\n                .then((e2) => {\n                  reply.send({\n                    status: true,\n                    data_act: {\n                      e,\n                      e2,\n                    },\n                  });\n                })\n                .catch((e2) => {\n                  reply.send({\n                    status: false,\n                    msg: e2,\n                  });\n                });\n            })\n            .catch((e) => {\n              reply.send({\n                status: false,\n                msg: e,\n              });\n            });\n        })\n        .catch((e) => {\n          reply.send({\n            status: false,\n            msg: e,\n          });\n        });\n    } else {\n      reply.send({\n        status: false,\n        msg: \"invalid session id\",\n      });\n    }\n  } else {\n    reply.send({\n      status: false,\n      msg: \"session not found\",\n    });\n  }\n}","figma":{}},"slug":"/api/project/show/[id]","site":"*","id":"83674"}